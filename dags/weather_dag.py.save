import json

from airflow import DAG
from airflow.models import Variable
from airflow.operators.python import PythonOperator
from airflow.providers.http.operators.http import SimpleHttpOperator
from airflow.providers.http.sensors.http import HttpSensor
from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.providers.sqlite.operators.sqlite import SqliteOperator
from airflow.utils.dates import days_ago
from airflow.utils.task_group import TaskGroup


def _process_weather(ti, **kwargs):
    info = ti.xcom_pull(f"processing_tasks.extract_data_{kwargs['city'].lower()}")
    timestamp = info["dt"]
    temp = info["main"]["temp"]
    return timestamp, temp


with DAG(dag_id="weather_dag", schedule_interval="@daily", start_date=days_ago(2)) as dag:

    check_api = HttpSensor(
        task_id="check_api",
        http_conn_id="weather_conn",
        endpoint="data/3.0/weather",
        request_params={"appid": Variable.get("WEATHER_API_KEY"), "q": "Lviv"},
    )

    with TaskGroup("processing_tasks") as processing_task:
        for city in ["Lviv", "Kyiv"]:
            extract_data = SimpleHttpOperator(
                task_id=f"extract_data_{city.lower()}",
                http_conn_id="weather_conn",
                endpoint="data/2.5/weather",
                data={"appid": Variable.get("WEATHER_API_KEY"), "q": "Lviv"},
                method="GET",
                response_filter=lambda x: json.loads(x.text),
                log_response=True,
            )

            process_data = PythonOperator(
                task_id=f"process_data_{city.lower()}", python_callable=_process_weather, op_kwargs={"city": city},
            )
            sql_template = """
            INSERT INTO measures (timestamp, temp, city) VALUES (to_timestamp({{ti.xcom_pull(task_ids='processing_tasks.process_data_city')[0]}}), {{ti.xcom_pull(task_ids='processing_tasks.process_data_city')[1]}}, '_City');
            """.replace('_city', f"_{city.lower()}").replace('_City', city)
            inject_data = PostgresOperator(
                task_id=f"inject_data_{city.lower()}",
                postgres_conn_id="db_conn",
                sql=sql_template
            )
            extract_data >> process_data >> inject_data
    check_api >> processing_task
